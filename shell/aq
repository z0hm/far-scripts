#!/bin/bash
# Bash script - interface for [Album Player Console](http://albumplayer.ru/linux/ap64.tar.gz "apc")
# ![aq script](http://i.piccy.info/i9/ce0b78c019db240a75a21f00089bfd7a/1600717787/7655/1397248/2020_09_21_221429.png)
# ![aq script](http://i.piccy.info/i9/b978141af12e993afff139bb461039db/1600717816/39618/1397248/946922020_09_21_223718.png)
# Commands:
# **h** - help, **e** - exit, **x** - exit with save path
# **.** - play all music files in folder, just **Enter** - repeat last command
# **l** - list files in folder, **a**/**z** - show **previous**/**next** 100 files
# **c<num>** - convert file to **/tmp/out.wav**, **v<num>**/**u<num>** - view ansi/utf-8 file
# **<num>** - play file <num>, **p**/**n** - play **previous**/**next** file, after **Enter** **Enter** ...
# **<num>.<num>:<num>** or **<num>:<num>** - play file number <num> from min:sec
# **<num>.<num>** or **.<num>** - play file <num> from track number <num>, if cue sheet loaded
# **s** - stop playback, **r** - return on jump history, after **Enter** **Enter** ...
# **ro<num>**/**rw<num>** - remount **FAT** partition as **read only**/**writable**, available in **/media** folder only
# **cp<num>** - copy file to **/media/flash**, **mv<num>** - move file, **rm<num>** - remove file
# **ap** - show active player, **ap0** - use auto select player, **ap1**/**ap2** - use player without/with timeshift
# **i** - show name played file and info about it, **i<num>** - show info about file
# **t** - show time and playing time, **tr** - reset playback time
# Url: http://albumplayer.ru/linux/english.html

# init
apmode=true  # use auto select player
apex=1  # use ap1
home=/media
aqpage=/tmp/aqpage
aqjump=/tmp/aqjump
aqjptr=/tmp/aqjptr
aqjdir=/tmp/aqjdir
app=/usr/ap
appath=$app/path.txt
applay=$app/play.txt
pglen=100
exts=(WAV FLAC APE WV OGG TAK ALAC AIFF DFF DSF MP3 MP4 AAC OPUS WMA RAD)
arr0=()  # array files in folder
arr1=()  # array files type: directory=true
arr2=()  # array music files attribute
jump=()  # jumps stack
num=0
oldnum=0
lastnum=0
page=0
start=0
finish=0
last=0
id=-1
path=""
from=""
msg=""
strS="                                                                                "
utf=true
brk=false

# colors
rk="\e[1;31;40m"
yr="\e[1;33;41m"
yg="\e[1;33;42m"
yb="\e[1;33;44m"
yk="\e[1;33;40m"
wr="\e[1;37;41m"
wg="\e[1;37;42m"
wb="\e[1;37;44m"
eb="\e[1;30;44m"
wk="\e[1;37;40m"
gb="\e[1;32;44m"
gk="\e[1;32;40m"
cb="\e[1;36;44m"
ck="\e[1;36;40m"
te="\e[0m"


# cursor up home
lnup(){ echo -ne "\e[1A\r"; }

# exit
bye(){ echo -e "$yb bye! $te\n"; exit 0; }

# link ap
lnapp(){ if [ -f "$app/ap$apex" ]; then ln -f $app/ap$apex $app/ap; fi; }

# view files
vname=""; vpath=""
fview(){
  read -r -N 3 line <<< "$(cat "$vpath")"
  if [[ ${line:0:1} == $'\xEF' && ${line:1:1} == $'\xBB' && ${line:2:1} == $'\xBF' ]]; then utf=true; fi
  if ! $utf; then local tmp="$vpath"; vpath="/tmp/$vname"; if [ "$tmp" != "$home/temp/$vname" ]; then iconv -c -f CP1251 -t UTF-8 "$tmp" > "$vpath"; fi; fi
  local tmp1=$eb; local tmp2=$te
  if [[ $vname =~ ^.+\.([^\.]+)$ ]]
  then tmp="${BASH_REMATCH[1]}"; tmp="${tmp^^}"
    if   [ "$tmp" == "CUE" ]; then tmp1=$yb; tmp2=$yk
    elif [ "$tmp" == "TXT" -o "$tmp" == "LOG" ]; then tmp1=$cb; tmp2=$ck
    fi
  fi
  echo -e "$yb view:$tmp1 $num $tmp2 $vname$te\n"
  exec 6<&0  # save STDIN to descriptor #6
  local n=0
  while read -r line
  do n=$(($n+1))
    if [ $n -gt $pglen ]
    then
      n=0
      exec 7<&0 <&6  # save current descriptor to descriptor #7 and restore STDIN from descriptor #6
      read -p "$(echo -e "vw>$wk enter$gk a$wk for abort or just press$gk Enter$wk for next $pglen lines: $te")"
      if [ "$REPLY" == "a" ]; then break; fi
      exec <&7  # restore input from vpath
    fi
    echo -ne "$wb"; echo -nE "$line"; echo -e "$te"
  done <<< "$(cat "$vpath")"
  exec 6<&- 7<&-  # close descriptors #6 & #7
}

# read cue
rdcue(){
  local track=0; unset cuenm; cuenm=(); unset cuepf; cuepf=(); unset cuefl; cuefl=(); unset cuetm; cuetm=(); unset cueln; cueln=(); cuewd=0
  while read line
  do
    if   [[ $line =~ TRACK[' ']([0-9][0-9])[' ']AUDIO ]]; then track=$(($track+1))
    elif [[ $line =~ TITLE[' ']\"[' ']*(.+)[' ']*\" ]]
    then cuenm[$track]=${BASH_REMATCH[1]}
      if [ $track -gt 0 ]
      then cueln[$track]=${#cuenm[$track]}
        if [ ${cueln[$track]} -gt $cuewd ]; then cuewd=${cueln[$track]}; fi
        if [ ${cueln[$track]} -gt 64 ]; then cuewd=67; fi
      fi
    elif [[ $line =~ PERFORMER[' ']\"[' ']*(.+)[' ']*\" ]]; then cuepf[$track]=${BASH_REMATCH[1]}
    elif [[ $line =~ FILE[' ']\"[' ']*(.+)[' ']*\" ]]; then cuefl[$track]=${BASH_REMATCH[1]}
    elif [[ $line =~ INDEX[' ']01[' ']([0-9]+:[0-9]+) ]]; then cuetm[$track]=${BASH_REMATCH[1]}
    fi
  done <<< "$(cat "$vpath")"
  read -r -N 3 line <<< "$(cat "$vpath")"
  if [[ ! ( ${line:0:1} == $'\xEF' && ${line:1:1} == $'\xBB' && ${line:2:1} == $'\xBF' ) ]] && [[ $(cat "$vpath") =~ [^\000-\127] ]]
  then local tmp="$vpath"; vpath="/tmp/$vname"; if [ "$tmp" != "$home/temp/$vname" ]; then iconv -c -f CP1251 -t UTF-8 "$tmp" > "$vpath"; fi
    track=0; unset cuenm; cuenm=(); unset cuepf; cuepf=(); unset cuefl; cuefl=()
    while read line
    do
      if   [[ $line =~ TRACK[' ']([0-9][0-9])[' ']AUDIO ]]; then track=$(($track+1))
      elif [[ $line =~ TITLE[' ']\"[' ']*(.+)[' ']*\" ]]; then cuenm[$track]=${BASH_REMATCH[1]}
      elif [[ $line =~ PERFORMER[' ']\"[' ']*(.+)[' ']*\" ]]; then cuepf[$track]=${BASH_REMATCH[1]}
      elif [[ $line =~ FILE[' ']\"[' ']*(.+)[' ']*\" ]]; then cuefl[$track]=${BASH_REMATCH[1]}
      fi
    done <<< "$(cat "$vpath")"
  fi
}

shcue(){
  echo -e "$wb==================================$yb cue sheet $wb==================================="
  echo -e "$yb Album: $cb${cuenm[0]}"
  echo -e "$yb Perf:  $cb${cuepf[0]}"
  echo -e "$yb File:  $cb${cuefl[0]}"
  local tmp=""
  for ((i=1;i<=${#cuetm[*]};i++))
  do
    if [ $i -lt 10 ]; then tmp=" "; else tmp=""; fi
    echo -e "$gb $i $wb$tmp ${cuenm[$i]}${strS:0:$(($cuewd-${cueln[$i]}))} $yb ${cuetm[$i]}"
    if [ "${cuepf[$i]}" != "" ] && [ "${cuepf[$i]}" != "${cuepf[$(($i-1))]}" ] && [ "${cuepf[$i]}" != "${cuenm[$i]}" ]; then echo -e "$yb Perf:  $cb${cuepf[$i]}"; fi
    if [ "${cuefl[$i]}" != "" ]; then echo -e "$yb File:  $cb${cuefl[$i]}"; fi
  done
  echo -e "$wb================================================================================$te"
}

# show page
shpage(){
  start=$(($page*$pglen))
  finish=$(($start+$pglen-1))
  if [ $finish -gt $last ]; then finish=$last; fi
  unset mus; mus=(); unset cue; cue=()
  for ((i=start;i<=finish;i++))
  do arr2[$i]=false
    if [ "$path" == "$home" ] && [ -w "$path/${arr0[$i]}" ]
    then echo -e "$wb $i $rk ${arr0[$i]}$te"
    else
      if [ "$from" == "${arr0[$i]}" ]
      then echo -e "$wb $i $wr ${arr0[$i]} $te"
      else
        if ${arr1[$i]}
        then echo -e "$wb $i $wk ${arr0[$i]}$te"
        else
          ext=""; res=false
          for v in ${exts[@]}
          do
            ext=${arr0[$i]:(-$((${#v}+1)))}; ext="${ext^^}"
            if [ "$ext" == ".$v" ]; then res=true; break; fi
          done
          if $res
          then arr2[$i]=true; mus+=($i); echo -e "$gb $i $gk ${arr0[$i]}$te"
          else
            if   [ "$ext" == ".CUE" ]; then cue+=($i); echo -e "$yb $i $yk ${arr0[$i]}$te"
            elif [ "$ext" == ".TXT" -o "$ext" == ".LOG" ]; then echo -e "$cb $i $ck ${arr0[$i]}$te"; else echo -e "$eb $i $te ${arr0[$i]}"
            fi
          fi
        fi
      fi
    fi
  done
  if [ ${#cue[*]} -gt 0 ] && [ ${#mus[*]} -eq 1 ]; then echo; vname="${arr0[${cue[0]}]}"; vpath="$path/$vname"; rdcue; shcue; fi
}

# seek folder and its id
seekid(){
  local folder="${path##*/}"
  local n=0
  while read line
  do n=$(($n+1)); if [ "$line" == "$folder" ]; then id=$n; break; fi
  done <<< "$(ls "${path%/*}")"
}

# msg for command line
prompt(){
  local key_a=""; local key_z=""; local key_r=""; local key_rw=""
  if [ $page -gt 0 ]; then key_a="$wk,$gk a"; fi
  if [ $finish -lt $last ]; then key_z="$wk,$gk z"; fi
  if [ ${#jump[*]} -gt 1 ]; then key_r="$wk,$gk r"; fi
  if [ "$path" == "$home" ]; then key_rw="$wk,$gk ro<num>$wk,$gk rw<num>"; fi
  msg=$(echo -ne "\naq>$wk enter$gk 0$wk..$gk$last$wk or$gk h$wk,$gk l$key_r$key_a$key_z$key_rw$wk, or$te nothing$wk [ $gk$oldnum$wk ]: $te")
}

# info line
infoln(){
  local txt=""; local log=/tmp/ffmpeg.log
  ffmpeg -hide_banner -i "$path" 2> $log
  while read line
  do
    if [[ $line =~ Duration:[' ']0([0-9]):([0-9][0-9]):([0-9][0-9]) ]]
    then txt="$((10#${BASH_REMATCH[1]}*60+10#${BASH_REMATCH[2]})):${BASH_REMATCH[3]}"
    elif [[ $line =~ Audio:[' '](.+)$ ]]
    then txt="$wb audio: $cb${BASH_REMATCH[1]} $wb length: $yb$txt $te"; break
    fi
  done <<< "$(cat $log)"
  if [ "$txt" != "" ]; then echo -e "$txt"; fi
}

# playback info
infopl(){
  id=0; vpath=""; vname=""
  while read line
  do
    if   [[ $line =~ /ap$ ]]
    then
      if [ -f "$applay" ] && [[ $(cat "$applay") =~ ^([0-9]+):(/.+)/([^/]+)$ ]]
      then
        id=${BASH_REMATCH[1]}
        vpath="${BASH_REMATCH[2]}"
        vname="${BASH_REMATCH[3]}"
      fi
      break
    elif [[ $line =~ /ap[' '](/.+)/([^/]+?\.[A-Za-z]+)([' '][0-9\.:]+)?$ ]]
    then
      local n=0
      vpath="${BASH_REMATCH[1]}"
      vname="${BASH_REMATCH[2]}"
      while read line
      do n=$(($n+1)); if [ "$line" == "$vname" ]; then id=$n; break; fi
      done <<< "$(ls "$vpath")"
    fi
  done <<< "$(ps -o args)"
  if [ $id -eq 0 ]; then lnup; else echo -e "\n$yb play:$gb $id $gk $vname$te\n"; fi
}

# kill ap
killap(){
  while read line
  do if [[ $line =~ /ap([' ']/.+)?$ ]]; then killall ap; sleep 1s; break; fi
  done <<< "$(ps -o args)"
}

# save state
aqsave(){
  echo "$page" > "$aqpage"
  echo "$jptr" > "$aqjptr"
  echo "$jdir" > "$aqjdir"
  echo -n "$path" > "$appath"
  if [ -f "$aqjump" ]; then rm "$aqjump"; fi
  for ((i=0;i<=$((${#jump[*]}-1));i++)); do echo "${jump[i]}" >> "$aqjump"; done
}

cdir(){
  cd "$path"
  if [ "$oldnum" != "r" ]
  then
    if   [ $jdir -ne 0 ]; then jump=("${jump[@]:0:$(($jptr+1))}" "$path"); jptr=$((${#jump[*]}-1))
    elif [ $jdir -eq 0 ]; then jump=("$path" "${jump[@]:$jptr}"); jptr=0
    fi
  fi
  brk=true #break
}

steppl(){
  local tmp=$num
  if [[ $oldnum =~ ^[np]$ ]]; then num=$lastnum; else num=$oldnum; fi
  if [[ $num =~ ^[0-9]+$ ]]
  then oldnum=$tmp
    if   [ "$tmp" == "p" ]; then if [ $num -gt 1 ] && ${arr2[$(($num-1))]}; then num=$(($num-1)); lastnum=$num; brk=true; else lnup; fi
    elif [ "$tmp" == "n" ]; then if [ $num -lt $last ] && ${arr2[$(($num+1))]}; then num=$(($num+1)); lastnum=$num; brk=true; else lnup; fi
    fi
  fi
}

aqhelp(){
  echo -e "$yb Help: $te"
  echo -e "\n$gk h$wk  help,$gk e$wk  exit,$gk x$wk  exit with save path$te"
  echo -e "\n$gk l$wk  list files,$gk a$wk  show previous $pglen files,$gk z$wk  show next $pglen files$te"
  echo -e "$te nothing$wk  repeat last command,$gk r$wk  return to previous folder$te"
  echo -e "\n$gk .$wk  play all music files in folder,$gk s$wk  stop playback$te"
  echo -e "$gk <num>$wk  play file <num>,$gk p$wk  play previous file,$gk n$wk  play next file$te"
  echo -e "$gk <num>.<num>:<num>$wk or$gk <num>:<num>$wk  play file number <num> from min:sec$te"
  echo -e "$gk <num>.<num>$wk or$gk .<num>$wk  play track number <num> if cue sheet loaded$te"
  echo -e "\n$gk t$wk  show time and playing time,$gk tr<num>$wk  reset playback time$te"
  echo -e "\n$gk i$wk  show name played file and info about it,$gk i<num>$wk  show info about file$te"
  echo -e "$gk c<num>$wk  convert file to /tmp/out.wav,$gk v<num>$wk/${gk}u<num>$wk  view ansi/utf-8 file$te"
  echo -e "\n$gk ap$wk  show active player,$gk ap0$wk  use auto select player$te"
  echo -e "$gk ap1$wk  use player without timeshift,$gk ap2$wk  use player with timeshift$te"
  echo -e "\n$gk ro<num>$wk  remount partition as RO,$gk rw<num>$wk  remount partition as RW$te"
  echo -e "$gk cp<num>$wk  copy file to $home/flash,$gk mv<num>$wk  move file,$gk rm<num>$wk  remove file$te"
}

apinfo(){
  local tmp="auto"
  local ap=0
  if ! $apmode; then tmp="ap$apex"; fi
  while read line
  do
    if   [[ $line =~ ^[rwx-]+[' ']+([12])[' '].+[' ']ap$ ]]; then ap=${BASH_REMATCH[1]}
    elif [[ $line =~ ^[rwx-]+[' ']+([12])[' '].+[' ']ap([12])$ ]]; then if [ ${BASH_REMATCH[1]} -eq $ap ]; then ap=${BASH_REMATCH[2]}; break; fi
    fi
  done <<< "$(ls -l "$app")"
  tmp="$tmp  $yb active player:$wb ap$ap"
  echo -e "\n$yb selected:$wb $tmp $te"
}

apset(){
  if [ "$timeshift" == "00:00" ]; then timeshift=0; fi
  if $apmode
  then
    if   [ "$timeshift" == "0" ] && [ $apex -ne 1 ]; then apex=1; lnapp
    elif [ "$timeshift" != "0" ] && [ $apex -ne 2 ]; then apex=2; lnapp
    fi
  fi
}

jhis(){
  newpath="${jump[$jptr]}"
  if [ ${#newpath} -lt ${#path} ]
  then num=0
  else curpath=$path; path="$newpath"; seekid; num=$id; path="$curpath"
  fi
  brk=true #break
}

setjptr(){
  if   [ $jdir -ne 0 ] && [ $jptr -lt $((${#jump[*]}-1)) ]; then jptr=$(($jptr+1)); jhis
  elif [ $jdir -eq 0 ] && [ $jptr -gt 0 ]; then jptr=$(($jptr-1)); jhis
  else num=$oldnum; ((jdir=!jdir))
  fi
}

tmshow(){
  unset tm; tm=()
  if [[ $(date +%T) =~ ([0-2][0-9]):([0-5][0-9]):([0-5][0-9]) ]]
  then tm[0]=${BASH_REMATCH[0]}; tm[1]=${BASH_REMATCH[1]}; tm[2]=${BASH_REMATCH[2]}; tm[3]=${BASH_REMATCH[3]}; tm[4]=$((3600*10#${tm[1]}+60*10#${tm[2]}+10#${tm[3]}))
  fi
}

tmdiff(){
  diff=""; local t1=()
  if [[ -v tm ]]
  then
    t1[0]=${tm[0]}; t1[1]=${tm[1]}; t1[2]=${tm[2]}; t1[3]=${tm[3]}; t1[4]=${tm[4]}
    tmshow; df=$((${tm[4]}-${t1[4]}))
    if [ $df -lt 0 ]; then df=$(($df+86400)); fi
    local m=$(($df/60)); if [ $m -lt 10 ]; then m="0$m"; fi
    local s=$(($df%60)); if [ $s -lt 10 ]; then s="0$s"; fi
    df=" $wb diff:$yb $m:$s"
    tm[0]=${t1[0]}; tm[1]=${t1[1]}; tm[2]=${t1[2]}; tm[3]=${t1[3]}; tm[4]=${t1[4]}
  else tmshow; df="${tm[0]}"; unset tm
  fi
}

plist(){
  if [ -f "$appath" ]; then rm "$appath"; fi
  # echo "$'\xEF\xBB\xBF'" > "$appath"
  for ((i=0;i<=$((${#mus[*]}-1));i++)); do echo "$path/${arr0[${mus[$i]}]}" >> "$appath"; done
}

# Main()
lnapp
echo -e "\n$yr -=[ AP console quiet ]=- $te"
echo -e "\n$gk h$wk  help,$gk e$wk  exit,$gk x$wk  exit with save path$te\n"
# load settings
if [ -s "$aqpage" ]; then page=$(<$aqpage); fi
if [ -s "$aqjump" ]; then while read line; do jump+=("$line"); done <<< "$(cat "$aqjump")"; else jump[0]="$home"; fi
if [ -s "$aqjptr" ]; then jptr=$(<$aqjptr); else jptr=$((${#jump[*]}-1)); fi
if [ -s "$aqjdir" ]; then jdir=$(<$aqjdir); else jdir=1; fi
#path=${jump[@]:(-1)}
path=${jump[$jptr]}

while true #:show
do
  unset arr0; arr0=(); unset arr1; arr1=(); unset arr2; arr2=()
  if [ "$path" == "$home" ]
  then arr0[0]=$(echo -e "$yb[ EXIT ]$te")
  else
    if [ $id -lt 0 ]; then seekid; fi
    echo -e "$yg $id $wg ${path##*/} $te\n"
    arr0[0]=$(echo -e "$wk..$te"); arr1[0]=true
  fi
  while read line
  do
    if [ "${line:(-1)}" == "/" ]; then arr0+=("${line:0:(-1)}"); arr1+=(true)
    elif [ "$line" != "" ]; then arr0+=("$line"); arr1+=(false)
    fi
  done <<< "$(ls -pL "$path")"
  last=$((${#arr0[*]}-1))
  shpage
  while true #:cline
  do
    if [ "$oldnum" != "r" ] && [ "$oldnum" != "n" ] && [ "$oldnum" != "p" ]; then oldnum=$num; fi
    prompt
    while read -p "$msg" num
    do
      tight=true
      if   [ "$num" == "." -a ${#mus[*]} -gt 0 ]
      then killap; tmshow
        echo -e "\n$yb ${tm[0]} play:$wb 1/${#mus[*]}$gb ${mus[0]} $gk ${arr0[${mus[0]}]}$te"
        cd "$app"
        if [ ${#mus[*]} -eq 1 ]
        then if [ $apex -ne 1 ]; then apex=1; lnapp; fi; ./ap "$path/${arr0[${mus[0]}]}" 0
        else if [ $apex -ne 2 ]; then apex=2; lnapp; fi; plist; ./ap
        fi
        tight=false; break
      elif [ "$num" == "i" ]; then infopl; if [ $id -gt 0 ]; then ffmpeg -hide_banner -i "$vpath/$vname"; fi; tight=false
      elif [ "$num" == "ap" ]; then apinfo; tight=false
      elif [ "$num" == "ap0" ]; then apmode=true; apinfo; tight=false
      elif [[ $num =~ ^ap([12])$ ]]; then apmode=false; apex=${BASH_REMATCH[1]}; lnapp; apinfo; tight=false
      elif [[ $num =~ ^([1-9][0-9]*)\.([1-9][0-9]*)$ ]] && [ ${BASH_REMATCH[1]} -le ${#arr0[*]} ] && ${arr2[${BASH_REMATCH[1]}]} && [ ${BASH_REMATCH[2]} -le ${#cuetm[*]} ]
      then num=${BASH_REMATCH[1]}; timeshift=${cuetm[${BASH_REMATCH[2]}]}; oldnum=$num; break
      elif [[ $num =~ ^\.([1-9][0-9]*)$ ]] && [ ${#cue[*]} -gt 0 ] && [ ${#mus[*]} -eq 1 ] && [ ${mus[0]} -lt ${#arr0[*]} ] && ${arr2[${mus[0]}]} && [ ${BASH_REMATCH[1]} -le ${#cuetm[*]} ]
      then num=${mus[0]}; timeshift=${cuetm[${BASH_REMATCH[1]}]}; oldnum=$num; break
      elif [[ $num =~ ^([0-9]+)\.([0-9]+[\.:][0-9]+)$ ]] && [ ${BASH_REMATCH[1]} -lt ${#arr0[*]} ] && ${arr2[${BASH_REMATCH[1]}]}
      then num=${BASH_REMATCH[1]}; timeshift=${BASH_REMATCH[2]}; oldnum=$num; break
      elif [[ $num =~ ^[0-9]+:[0-9]+$ ]]
      then timeshift=${BASH_REMATCH[0]}
        if [ ${#mus[*]} -eq 1 ]
        then num=${mus[0]}; oldnum=$num; break
        else infopl; if [ $id -gt 0 ]; then num=$id; oldnum=$num; break; else num=$oldnum; fi
        fi
      fi
      timeshift=0
      if   [ "$num" == "" ] && [[ $oldnum =~ ^[0-9]+$ ]] &&  [ ${#arr0[*]} -lt 2 ]; then num=0; oldnum=$num; break
      elif [ "$num" == "" ] && [[ $oldnum =~ ^[0-9]+$ ]] &&  [ ${#arr0[*]} -eq 2 ] && ${arr1[1]}; then if [ $oldnum -eq 0 ]; then num=0; else num=1; fi; oldnum=$num; break
      elif [ "$num" == "x" ]; then echo; aqsave; bye
      elif [ "$num" == "e" ]; then echo; bye
      elif [ "$num" == "h" ]; then echo; aqhelp; tight=false
      elif [ "$path" == "$home" ] && [[ $num =~ ^(r[ow])([1-9][0-9]*)$ ]] && [ ${BASH_REMATCH[2]} -lt $((${#arr0[*]}-1)) ]
      then echo; vname=${arr0[${BASH_REMATCH[2]}]}; vpath=$path/$vname; mount -o noatime,nodiratime,remount,${BASH_REMATCH[1]} $vpath; shpage; tight=false
      elif [[ $num =~ ^([ci])([1-9][0-9]*)$ ]] && [ ${BASH_REMATCH[2]} -lt ${#arr0[*]} ] && ${arr2[${BASH_REMATCH[2]}]}
      then vname=${arr0[${BASH_REMATCH[2]}]}
        if   [ "${BASH_REMATCH[1]}" == "i" ]
        then
          echo -e "\n$yb info:$gb $num $gk $vname$te\n"
          ffmpeg -hide_banner -i "$path/$vname"
          tight=false
        elif [ "${BASH_REMATCH[1]}" == "c" ]
        then
          ext="${vname:(-7)}"; ext="${ext^^}"
          if [ "$ext" == ".ISO.WV" ]
          then
            umount /tmp/iso > /dev/null 2>&1
            mount -t iso9660 -o loop "$path/$vname" /tmp/iso
            tight=false
          else
            killap
            echo -e "\n$yb conv:$gb $num $gk $vname$te\n"
            ffmpeg -vn -y -hide_banner -i "$path/$vname" -acodec pcm_s32le "/tmp/out.wav"
            tmshow
            echo -e "\n$yb ${tm[0]} play:$gb $num $gk $vname$te"
            apset; cd "$app"; ./ap "/tmp/out.wav" 0
            tight=false
          fi
        fi
      elif [[ $num =~  ^v([1-9][0-9]*)$ ]] && [ ${BASH_REMATCH[1]} -lt ${#arr0[*]} ]; then vname=${arr0[${BASH_REMATCH[1]}]}; echo; vpath="$path/$vname"; utf=false; fview; tight=false
      elif [[ $num =~  ^u([1-9][0-9]*)$ ]] && [ ${BASH_REMATCH[1]} -lt ${#arr0[*]} ]; then vname=${arr0[${BASH_REMATCH[1]}]}; echo; vpath="$path/$vname"; utf=true; fview; tight=false
      elif [[ $num =~ ^cp([1-9][0-9]*)$ ]] && [ ${BASH_REMATCH[1]} -lt ${#arr0[*]} ]; then vname=${arr0[${BASH_REMATCH[1]}]}; echo; cp "$path/$vname" "$home/flash"; tight=false
      elif [[ $num =~ ^mv([1-9][0-9]*)$ ]] && [ ${BASH_REMATCH[1]} -lt ${#arr0[*]} ]; then vname=${arr0[${BASH_REMATCH[1]}]}; echo; mv "$path/$vname" "$home/flash"; tight=false
      elif [[ $num =~ ^rm([1-9][0-9]*)$ ]] && [ ${BASH_REMATCH[1]} -lt ${#arr0[*]} ]; then vname=${arr0[${BASH_REMATCH[1]}]}; echo; rm "$path/$vname"; tight=false
      fi
      if   [ "$oldnum" != "r" ] && [ "$num" == "" ]; then num=$oldnum
      elif [ "$oldnum" == "r" ] && [ "$num" == "" ]; then setjptr; if $brk; then brk=false; break; fi
      elif [ "$num" == "r" ]; then oldnum=$num; ((jdir=!jdir)); setjptr; if $brk; then brk=false; break; fi
      fi
      if   [ "$num" == "s" ]; then echo -e "\n$yb stop $te"; killap
      elif [ "$num" == "t" ]; then oldnum=$num; tmdiff; echo -e "\n$wb time:$yb ${tm[0]}$df $te"
      elif [ "$num" == "tr" ]; then tmshow; echo -e "\n$wb time:$yb ${tm[0]} $wb diff:$yb 00:00 $te"
      elif [ "$num" == "l" ]; then echo; shpage
      elif [ "$num" == "z" -a $finish -lt $last ]; then echo; page=$(($page+1)); oldnum=$num; shpage
      elif [ "$num" == "a" -a $page -gt 0 ]; then echo; page=$(($page-1)); oldnum=$num; shpage
      elif [[ $num =~ ^[np]$ ]]; then steppl; if $brk; then brk=false; break; fi
      elif [[ $num =~ ^[0-9]+$ ]] && [ $num -lt ${#arr0[*]} ]
      then oldnum=$((10#$num)); break
      else if $tight; then lnup; fi
      fi
      prompt
    done
    if [ "$num" == "." ]; then :
    elif [ $num -eq 0 ]
    then  #cdup
      echo
      from="${path##*/}"
      if [ "$path" == "$home" ]
      then bye
      else seekid; page=$(($id/$pglen)); id=-1; path="${path%/*}"; cdir; if $brk; then brk=false; break; fi
      fi
    else  #cddn
      from=""
      vpath="$path/${arr0[$num]}"
      if ${arr1[$num]}; then echo; page=0; id=$num; path="$vpath"; cdir; if $brk; then brk=false; break; fi
      elif [ -f "$vpath" ]
      then
        if ${arr2[$num]}
        then
          killap; tmshow
          echo -e "\n$yb ${tm[0]} play:$gb $num $gk ${arr0[$num]}$te"
          infoln; apset; cd "$app"; ./ap "$vpath" $timeshift
        else
          vname="${arr0[$num]}"; ext="${vname:(-4)}"; ext="${ext^^}"
          if   [ "$ext" == ".CUE" ]; then echo; rdcue; shcue; aqsave
          elif [ "$ext" == ".TXT" -o "$ext" == ".LOG" ]; then echo; utf=true; fview
          else lnup
          fi
        fi
        # continue #goto :cline
      fi
    fi
  done #goto cline
done #goto :show
